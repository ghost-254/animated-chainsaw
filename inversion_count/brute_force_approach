# Python 

import matplotlib.pyplot as plt
import time
import random

def generate_random_array(size):
    """
    Generates a random array of the given size.

    Parameters:
    - size: int, the size of the array

    Returns:
    - List[int], the random array
    """
    return [random.randint(1, 100) for _ in range(size)]

def count_inversions_bruteforce(arr):
    """
    Counts inversions in an array using a brute-force approach.

    Parameters:
    - arr: List[int], the input array

    Returns:
    - int, the inversion count
    """
    inversion_count = 0
    n = len(arr)

    for i in range(n):
        for j in range(i + 1, n):
            if arr[i] > arr[j]:
                inversion_count += 1

    return inversion_count

# Record the start time
start_time = time.time()

# Example usage:
arr = generate_random_array(10)  # Change the size as needed

# Brute-Force Approach
inversion_count_bruteforce = count_inversions_bruteforce(arr)

# Plotting the Original Array and the Sorted Array on a graph
plt.figure(figsize=(18, 6))

plt.subplot(1, 2, 1)
plt.bar(range(len(arr)), arr, color='blue')
plt.title('Original Array')

plt.subplot(1, 2, 2)
plt.bar(range(len(arr)), arr, color='green')
plt.title('Brute-Force Sorted Array')

plt.show()

print("Original Array:", arr)
print("Brute-Force Sorted Array:", sorted(arr))
print("Inversion Count (Brute-Force):", inversion_count_bruteforce)

# Record the end time
end_time = time


# Record the end time
end_time = time.time()

# Calculate the total runtime
total_runtime = end_time - start_time

# Print the total runtime
print(f"Total runtime: {total_runtime} seconds")
